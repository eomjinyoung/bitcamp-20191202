package com.eomcs.design_pattern.observer.before;

public class Test01 {

  public static void main(String[] args) {
    Car car = new Car();
    
    car.start();
    
    car.run();
    
    car.stop();
    
    // Car 클래스를 생성한 후 
    // 1) 자동차의 시동을 걸 때 안전벨트 착용 여부를 검사하는 기능을 추가한다.
    // 프로젝트 완료한 다음 시간이 지난 후 
    // 
    // 2) 자동차 시동 걸 때 엔진 오일 검사 기능을 추가한다.
    // 업그레이드를 수행한 다음 시간이 지난 후
    // 
    // 3) 자동차 시동 걸 때 브레이크 오일 검사 기능을 추가한다.
    // 업그레이드를 수행한 다음 시간이 지난 후 
    // 
    // 4) 시동 끌 때 자동차 전조등을 자동으로 끄는 기능을 추가한다.
    // 업그레이드를 수행한 다음 시간이 지난 후 
    //
    // 5) 시동 끌 때 썬루프를 자동으로 닫기
    //
    
    // 결론!
    // => 기존의 프로그래밍 방식은 특정 상태에서 수행하는 기능을 추가할 때 
    //    기존 클래스에 계속 코드를 추가해야 했다.
    // => 기존 코드에 계속 새 코드를 추가하는 방식은 유지보수에 좋지 않다.
    // => Observer 패턴을 적용하면 기존 클래스를 손대지 않고 
    //    특정 상태에서 수행하는 작업을 쉽게 추가할 수 있다.
  }

}








